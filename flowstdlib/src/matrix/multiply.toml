flow = "multiply"
docs = "multiply.md"

[[input]]
name = "a"
type = "array/array/number"

[[input]]
name = "b"
type = "array/array/number"

[[output]]
name = "product"
type = "array/array/number"

[[process]]
alias = "b_info"
source = "lib://flowstdlib/data/info"

[[connection]]
from = "input/b"
to ="b_info"

[[process]]
alias = "a_info"
source = "lib://flowstdlib/data/info"

[[connection]]
from = "input/a"
to ="a_info"

# Duplicate the rows in matrix a
[[process]]
source = "lib://flowstdlib/matrix/duplicate_rows"

[[connection]]
from = "input/a"
to = "duplicate_rows"

[[connection]]
from = "b_info/columns"
to = "duplicate_rows/factor"

# Transpose rows and columns of matrix b, then duplicate it to have the number of columns required to multiple by rows
[[process]]
source = "lib://flowstdlib/matrix/transpose"

[[connection]]
from = "input/b"
to = "transpose"

[[process]]
alias = "duplicate_columns"
source = "lib://flowstdlib/data/duplicate"

[[connection]]
from = "transpose/matrix"
to = "duplicate_columns/value"

[[process]]
alias = "duplicate_column_indexes"
source = "lib://flowstdlib/data/duplicate"

[[connection]]
from = "transpose/column_indexes"
to = "duplicate_column_indexes/value"

[[connection]]
from = "b_info/columns"
to = ["duplicate_columns/factor", "duplicate_column_indexes/factor"]


# Do the row x column product for the rows and columns
[[process]]
source = "lib://flowstdlib/matrix/multiply_row"
input.a_index = { always = 0 }
input.b_index = { always = 0 }

[[connection]]
from = "duplicate_rows/matrix"
to = "multiply_row/a"

[[connection]]
from = "duplicate_columns"
to = "multiply_row/b"

# Gather the values into rows of the matrix product
[[process]]
alias = "compose_rows"
source = "lib://flowstdlib/data/accumulate"
input.partial = { once =  [] }

[[connection]]
from = "compose_rows/partial"
to = "compose_rows/partial"

[[connection]]
from = "compose_rows/chunk_size"
to = "compose_rows/chunk_size"

[[connection]]
from = "multiply_row/product"
to = "compose_rows/values"

[[connection]]
from = "b_info/columns"
to = "compose_rows/chunk_size"

# Gather the rows of values into the final 2D matrix that is the product of a and b
[[process]]
alias = "compose_matrix"
source = "lib://flowstdlib/data/accumulate"
input.partial = { once =  [] }

[[connection]]
from = "compose_matrix/partial"
to = "compose_matrix/partial"

[[connection]]
from = "compose_matrix/chunk_size"
to = "compose_matrix/chunk_size"

[[connection]]
from = "compose_rows/chunk"
to = "compose_matrix/values"

[[connection]]
from = "a_info/rows"
to = "compose_matrix/chunk_size"

# Output the final matrix product
[[connection]]
from = "compose_matrix/chunk"
to = "output/product"
