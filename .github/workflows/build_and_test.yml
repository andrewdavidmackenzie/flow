name: Build and Test with Coverage

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  schedule: # Build every day at 5PM UTC
    - cron: '0 17 * * *'

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ macos-latest, ubuntu-latest ]
        rust: [ nightly ]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: SetupEnv
        run: |
          echo "FLOW_LIB_PATH=$HOME/.flow/lib" >> "$GITHUB_ENV"
          echo "PATH=$GITHUB_WORKSPACE/target/debug:$PATH" >> "$GITHUB_ENV"
          echo "CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse" >> "$GITHUB_ENV"

      - name: Install latest nightly
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
          components: clippy
          target: wasm32-unknown-unknown

      - name: Cargo Cache
        uses: actions/cache@v1
        with:
          path: |
            ~/.cargo
            target/
          key: ${{ runner.os }}-cargo_cache-${{ hashFiles('Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-cargo_cache-${{ hashFiles('Cargo.toml') }}
            ${{ runner.os }}-cargo_cache-

      - name: InstallLinuxDependencies
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get -y install libzmq3-dev binaryen

      - name: InstallMacDependencies
        if: matrix.os == 'macos-latest'
        run: brew install zmq binaryen

      - name: InstallWasmTools
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: wasm-gc wasm-snip

      - name: ConfigureCoverage
        if: matrix.os == 'ubuntu-latest'
        run: |
          cargo install grcov
          sudo apt-get -y install lcov
          rustup component add llvm-tools-preview
          echo RUSTFLAGS="-C instrument-coverage" >> "$GITHUB_ENV"
          echo LLVM_PROFILE_FILE="flow-%p-%m.profraw" >> "$GITHUB_ENV"

      # Binaries of flowc and flowr are required to run clippy on flowstdlib, as it's build.rs script uses them
      - name: build-flowc
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: -p flowc

      - name: build-flowr
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: -p flowr

      # flowstdlib is required to run some tests and most flowr examples
      - name: build-flowstdlib
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: -p flowstdlib

      - name: clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --tests -- -D warnings

      - name: build all
        uses: actions-rs/cargo@v1
        with:
          command: build

      - name: test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --features "online_tests"

      - name: UploadCoverage
        if: matrix.os == 'ubuntu-latest'
        run: |
          grcov . --binary-path target/debug/ -s . -t lcov --branch --ignore-not-existing --ignore "/*" -o lcov.info
          lcov --remove lcov.info '/Applications/*' 'target/debug/build/**' '/usr*' '**/errors.rs' '**/build.rs' '*tests/*' -o lcov.info
          bash <(curl -s https://codecov.io/bash) -f lcov.info
          rm -f lcov.info

      - name: Generate docs
        if: github.ref == 'refs/heads/master' && matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update && sudo apt-get -y install graphviz
          curl -sSL https://github.com/rust-lang/mdBook/releases/download/v0.4.27/mdbook-v0.4.27-x86_64-unknown-linux-gnu.tar.gz | tar -xz --directory=$HOME/.cargo/bin
          curl -sSL https://github.com/Michael-F-Bryan/mdbook-linkcheck/releases/download/v0.7.7/mdbook-linkcheck.x86_64-unknown-linux-gnu.zip > mdbook-linkcheck.zip
          mkdir -p $HOME/.cargo/bin
          unzip mdbook-linkcheck.zip -d $HOME/.cargo/bin
          chmod +x $HOME/.cargo/bin/mdbook-linkcheck
          echo "PATH=$HOME/.cargo/bin:$PATH" >> "$GITHUB_ENV"
          mdbook build
          cargo doc --no-deps --target-dir=target/html/code
          make copy-svgs
          make trim-docs

      - name: Deploy docs
        if: github.ref == 'refs/heads/master' && matrix.os == 'ubuntu-latest'
        uses: JamesIves/github-pages-deploy-action@4.1.4
        with:
          branch: gh-pages
          folder: target/html